using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace AllHeadPartsAllRacesPatcher
{
    public class ProgramSettings
    {
        public bool includeBeastRaces;
    }
    public class Program
    {
        static Lazy<ProgramSettings> Settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("\nSetting: \"BEAST RACES INCLUDED IN PATCH\" = " + Settings.Value.includeBeastRaces.ToString().ToUpper() + "\n");
            var newFormlist = state.PatchMod.FormLists.AddNew();
            newFormlist.EditorID = "synthesisHeadPartsAllRaces";
            List<FormKey> beastRaces = new() { FormKey.Factory("013740:Skyrim.esm"), FormKey.Factory("013745:Skyrim.esm"), FormKey.Factory("08883A:Skyrim.esm"), FormKey.Factory("088845:Skyrim.esm") };
            List<FormKey> playableRaces = new();
            foreach (var racesGetter in state.LoadOrder.PriorityOrder.Race().WinningOverrides())
            {
                if (racesGetter.Flags.HasFlag(Race.Flag.Playable))
                {
                    if (Settings.Value.includeBeastRaces)
                    {
                        playableRaces.Add(racesGetter.FormKey);
                        newFormlist.Items.Add(racesGetter);
                    }
                    else if (!beastRaces.Contains(racesGetter.FormKey))
                    {
                        playableRaces.Add(racesGetter.FormKey);
                        newFormlist.Items.Add(racesGetter);
                    }
                }
            }
            foreach (var racesGetter in state.LoadOrder.PriorityOrder.Race().WinningOverrides())
            {
                if (racesGetter.MorphRace != null && playableRaces.Contains(racesGetter.MorphRace.FormKey))
                {
                    newFormlist.Items.Add(racesGetter);
                }
            }
            foreach (var headpartsGetter in state.LoadOrder.PriorityOrder.HeadPart().WinningOverrides())
            {
                if (!Settings.Value.includeBeastRaces)
                {
                    var validRacesFormList = headpartsGetter.ValidRaces.TryResolve(state.LinkCache);
                    bool isInvalid = false;
                    if (validRacesFormList == null) continue;
                    {
                        foreach (var link in validRacesFormList.EnumerateFormLinks())
                        {
                            if (beastRaces.Contains(link.FormKey))
                            {
                                isInvalid = true;
                            }
                        }
                        if (isInvalid == false)
                        {
                            state.PatchMod.HeadParts.GetOrAddAsOverride(headpartsGetter).ValidRaces.SetTo(newFormlist);
                        }
                    }
                }
                else
                {
                    state.PatchMod.HeadParts.GetOrAddAsOverride(headpartsGetter).ValidRaces.SetTo(newFormlist);
                }
            }
        }
    }
}
